#!/usr/bin/env bash
SCRIPTDIR="$(cd "`dirname "$0"`"; pwd)"
TIMESTAMP="$(date +%Y%m%d_%H%M%S)"
LOGDIR="${SCRIPTDIR}/.logs"
[[ -d "${LOGDIR}" ]] || mkdir -p "${LOGDIR}"

UNAME="$(uname)"
CMD="$(basename "$0")"


unset FIRST
unset SECOND
if [[ "${CMD}" =~ "1st" ]]; then
    FIRST=1
elif [[ "${CMD}" =~ "2nd" ]]; then
    SECOND=1
fi


#
# Flags for base
#

unset CLEAN
if [[ -n "${FIRST}" ]]; then
# NOTE: only for the 1st pass
    CLEAN="-c"
fi


unset RELEASE
# -d is default
RELEASE="-r"
#RELEASE="-R"
#RELEASE="-d"

unset TEST
TEST="-t"
#TEST="-T"

unset NOASSERT
NOASSERT="--no-assertions"


unset BUILD_ROOT_RELEASE
if [[ "${RELEASE}" == "-r" || "${RELEASE}" == "--release-debuginfo" ]]; then
    BUILD_ROOT_RELEASE="RelWithDebInfo"
elif [[ "${RELEASE}" == "-R" || "${RELEASE}" == "--release" ]]; then
    BUILD_ROOT_RELEASE="Release"
elif [[ "${RELEASE}" == "-d" || "${RELEASE}" == "--debug" ]]; then
    BUILD_ROOT_RELEASE="Debug"
else
    BUILD_ROOT_RELEASE="Debug"
fi

unset BUILD_ROOT_ASSERT
if [[ -z "${NOASSERT}" ]]; then
    BUILD_ROOT_ASSERT="Assert"
fi

BUILD_ROOT="Ninja-${BUILD_ROOT_RELEASE}${BUILD_ROOT_ASSERT}"
unset BUILD_ROOT_RELEASE
unset BUILD_ROOT_ASSERT


unset LLDB
# NOTE: OK for the 1st pass
if [[ -n "${FIRST}" ]]; then
# FIXME NOTE: --lldb fails on Darwin
#    LLDB="--lldb"
    [[ "${UNAME}" == "Linux" ]] && LLDB="--lldb"
fi

unset LLBUILD
if [[ ( "${UNAME}" == "Darwin" && -n "${FIRST}" ) || ( "${UNAME}" == "Linux" && -n "${SECOND}" ) ]]; then
# NOTE: (Darwin) OK for the 1st pass
# NOTE: (Linux) Not OK for the 1st pass. OK for the 2nd pass
# NOTE: Foundation must be built in the 1st pass on non-apple platforms.
    LLBUILD="--llbuild"
fi

unset SWIFTPM
if [[ ( "${UNAME}" == "Darwin" && -n "${FIRST}" ) || ( "${UNAME}" == "Linux" && -n "${SECOND}" ) ]]; then
# NOTE: (Darwin) OK for the 1st pass
# NOTE: (Linux) Not OK for the 1st pass. OK for the 2nd pass
# NOTE: --swiftpm requires --llbuild
    SWIFTPM="--swiftpm"
fi

unset XCTEST
if [[ -n "${FIRST}" || -n "${TEST}" ]]; then
# NOTE: OK for the 1st pass
# NOTE: OK for the 2nd pass.
# NOTE: Probably --xctest is needed when we build with -t or -T
# NOTE: (not sure) --foundation requires --xctest
    XCTEST="--xctest"
fi

unset FOUNDATION
if [[ -n "${FIRST}" ]]; then
# NOTE: OK for the 1st pass
    [[ "${UNAME}" == "Linux" ]] && FOUNDATION="--foundation"
fi

# NOTE: libdispatch doesn't compile
unset LIBDISPATCH
#[[ "${UNAME}" == "Linux" ]] && LIBDISPATCH="--libdispatch"

# NOTE: benchmark doesn't compile
unset BENCHMARK
#BENCHMARK="-B"


#
# Flags for impl
#

unset RECONFIGURE
if [[ -n "${FIRST}" ]]; then
# NOTE: only for the 1st pass
    RECONFIGURE="--reconfigure"
fi


unset IMPL_FLAGS
if [ -n "${RECONFIGURE}" ]; then
    IMPL_FLAGS="-- ${RECONFIGURE}"

    if [[ -d "${SCRIPTDIR}/../build/${BUILD_ROOT}" ]]; then
        # NOTE: until --reconfigure automatically removes CMakeCache.txt
        find ${SCRIPTDIR}/../build/${BUILD_ROOT} -name CMakeCache.txt -exec rm '{}' \;
    fi
fi


echo "Building swift started at $(date)" | tee -a "${LOGDIR}/${CMD}-${TIMESTAMP}.log"

cmd="${SCRIPTDIR}/../swift/utils/build-script ${CLEAN} ${RELEASE} ${TEST} ${NOASSERT} ${LLDB} ${LLBUILD} ${SWIFTPM} ${XCTEST} ${FOUNDATION} ${LIBDISPATCH} ${BENCHMARK} ${IMPL_FLAGS} 2>&1 | tee -a ${LOGDIR}/${CMD}-${TIMESTAMP}.log"

echo "$cmd" | tee -a "${LOGDIR}/${CMD}-${TIMESTAMP}.log"
eval $cmd

echo "Building swift finished at $(date)" | tee -a "${LOGDIR}/${CMD}-${TIMESTAMP}.log"
